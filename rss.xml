<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<author><name>Javier Pacheco</name></author>
<title>Javier Pacheco's Blog</title>
<description>Posts, information and resources from Javier Pacheco</description>
<generator>Emacs webfeeder.el</generator>
<link>https://jpacheco.codeberg.page/</link>
<atom:link href="https://jpacheco.codeberg.page/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Sat, 30 Dec 2023 22:19:32 -0600</lastBuildDate>
<item>
  <title>Copy org blocks to clipboard</title>
  <description><![CDATA[<div id="content" class="content">
 <p>

</p>

 <div class="PREVIEW" id="org58b332a">
 <p>
In this post I'll demostrate how to add a button to copy the content of a 
src block generated by ox-publish in emacs within org-mode, this script
create a button in every instance of codeblock in the html file that ox-publish
generate when create the web-page content.
</p>

</div>

 <div class="org-center">

 <figure id="org7ecea3b"> <img src="./img/20231229T170308--copy-org-blocks-to-clipboard/copy.gif" alt="copy.gif"></img> <figcaption> <span class="figure-number">Figure 1: </span>How the buttons looks like.</figcaption></figure></div>
 <div id="outline-container-org87d6262" class="outline-2">
 <h2 id="org87d6262">The first issue.</h2>
 <div class="outline-text-2" id="text-org87d6262">
 <p>
When I started to looking in how to add a copy button to my org-block-src blocks,
I was getting a little confused because of the lack of information about it (or maybe
I was not ask in the proper way), but I found a  <a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html">webpage</a> that help me to figure it out
how to make this possible. But I found that there is a problem, it's  <code>javascript</code> looks
a  <code><code></code> tag, and ox-publish (as far as I know) don't generate that tag in the html file, 
so I have been force to use my brain instead of only copy the scripts.
</p>
</div>
</div>

 <div id="outline-container-org23a89a9" class="outline-2">
 <h2 id="org23a89a9">The Javascript code.</h2>
 <div class="outline-text-2" id="text-org23a89a9">
 <p>
The code below can be improved? yes, but at this point for me it works and its ok,
may be can be a little mess, but it do the job.
This is the whole javascript code that I wrote:
</p>
 <div class="org-src-container">
 <pre class="src src-javascript"> <span class="org-keyword">function</span>  <span class="org-function-name">copyPreTextToClipboard</span>( <span class="org-variable-name">orgSrcContainer</span>,  <span class="org-variable-name">classes</span>) {
   <span class="org-keyword">let</span>  <span class="org-variable-name">preTag</span>;
   <span class="org-keyword">for</span> ( <span class="org-keyword">const</span>  <span class="org-variable-name">classItem</span>  <span class="org-keyword">of</span> classes) {
    preTag = orgSrcContainer.querySelector( <span class="org-string">`pre.${classItem}`</span>);
     <span class="org-keyword">if</span> (preTag)  <span class="org-keyword">break</span>;
  }

   <span class="org-keyword">if</span> (preTag) {
     <span class="org-keyword">const</span>  <span class="org-variable-name">textContent</span> = preTag.textContent;

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Get class name of the container</span>
     <span class="org-keyword">const</span>  <span class="org-variable-name">containerClass</span> = orgSrcContainer.className;

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Create a temporary textarea element to copy the text</span>
     <span class="org-keyword">const</span>  <span class="org-variable-name">tempTextarea</span> = document.createElement( <span class="org-string">'textarea'</span>);
    tempTextarea.value = textContent;

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Append the textarea to the document</span>
    document.body.appendChild(tempTextarea);

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Select the text within the textarea</span>
    tempTextarea.select();

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Copy the selected text to the clipboard</span>
    document.execCommand( <span class="org-string">'copy'</span>);

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Remove the temporary textarea</span>
    document.body.removeChild(tempTextarea);

    console.log( <span class="org-string">'Text copied to clipboard:'</span>, textContent);
    console.log( <span class="org-string">'Class name of container:'</span>, containerClass);

     <span class="org-comment-delimiter">// </span> <span class="org-comment">Change button label to "Copied"</span>
     <span class="org-keyword">const</span>  <span class="org-variable-name">button</span> = orgSrcContainer.querySelector( <span class="org-string">'button'</span>);
     <span class="org-keyword">if</span> (button) {
      button.textContent =  <span class="org-string">'Copied'</span>;
      button.disabled =  <span class="org-constant">true</span>;  <span class="org-comment-delimiter">// </span> <span class="org-comment">Disable the button after copying</span>

       <span class="org-comment-delimiter">// </span> <span class="org-comment">Revert button to its initial state after 3 seconds</span>
      setTimeout(() => {
        button.textContent =  <span class="org-string">'Copy Text'</span>;
        button.disabled =  <span class="org-constant">false</span>;  <span class="org-comment-delimiter">// </span> <span class="org-comment">Enable the button after timeout</span>
      }, 3000);
    }
  }  <span class="org-keyword">else</span> {
    console.log( <span class="org-string">'Pre tag with specified classes not found inside org-src-container'</span>);
  }
}

 <span class="org-keyword">function</span>  <span class="org-function-name">createCopyButtonForDivs</span>() {
   <span class="org-keyword">const</span>  <span class="org-variable-name">orgSrcContainers</span> = document.querySelectorAll( <span class="org-string">'div.org-src-container'</span>);
  orgSrcContainers.forEach((container) => {
     <span class="org-keyword">const</span>  <span class="org-variable-name">button</span> = document.createElement( <span class="org-string">'button'</span>);
    button.textContent =  <span class="org-string">'Copy Text'</span>;
    button.addEventListener( <span class="org-string">'click'</span>, () => {
                                 <span class="org-keyword">const</span>  <span class="org-variable-name">classesToSearch</span> = [
                                                 <span class="org-string">'src.src-emacs-lisp'</span>,
                                                 <span class="org-string">'src.src-python'</span>,
                                                 <span class="org-string">'src.src-javascript'</span>,
                                                 <span class="org-string">'src.src-c'</span>,
                                                 <span class="org-string">'src.src-html'</span>,
                                                 <span class="org-string">'src.src-css'</span>];  <span class="org-comment-delimiter">// </span> <span class="org-comment">Add more classes/languages as needed</span>
                                copyPreTextToClipboard(container, classesToSearch);
    });

    container.appendChild(button);
  });
}

 <span class="org-comment-delimiter">// </span> <span class="org-comment">Call the function to create copy buttons in each org-src-container div</span>
createCopyButtonForDivs();
</pre>
</div>
</div>

 <div id="outline-container-orga168d5a" class="outline-3">
 <h3 id="orga168d5a">What the javascript script actually do:</h3>
 <div class="outline-text-3" id="text-orga168d5a">
 <p>
The provided code is a JavaScript script that aims to add functionality to copy text from <pre> elements with specific classes when a corresponding button is clicked. Here's a breakdown of what each part of the code does:
</p>

 <p>
 <code>copyPreTextToClipboard(orgSrcContainer, classes)</code>
This function receives two parameters:
</p>

 <p>
 <code>orgSrcContainer</code>: Represents the container element that holds  <code><pre></code> elements.
 <code>classes</code>: An array of strings containing classes (like CSS classes) representing different languages in  <code><pre></code> elements.
It searches for a  <code><pre></code> element with the specified classes inside the  <code>orgSrcContainer</code>.
</p>

 <p>
If found:
</p>

 <p>
Grabs the text content of the  <code><pre></code> element.
Creates a temporary  <code><textarea></code> element, sets its value to the extracted text, appends it to the document body, selects its content, and copies it to the clipboard using  <code>document.execCommand('copy')</code>.
Logs the copied text and the class name of the container to the console.
Modifies the button inside the container to display  <code>"Copied"</code> disables it temporarily, and reverts it to its initial state after 3 seconds.
 <code>createCopyButtonForDivs()</code>
This function targets all  <code><div></code> elements with the class  <code>org-src-container</code>.
For each of these divs, it creates a new button.
The button is assigned the text  <code>"Copy Text"</code> and an event listener that triggers the  <code>copyPreTextToClipboard()</code> function when clicked.
 <code>copyPreTextToClipboard()</code> is called with the specific container ( <code>div.org-src-container</code>) and an array of classes representing different programming languages.
Overall Functionality.
</p>

 <p>
This script aims to enhance the functionality of  <code><div></code> containers by adding a  <code>"Copy Text"</code> button to each container. When this button is clicked, it searches for  <code><pre></code> elements with specific classes inside that container and copies their text content to the clipboard. Additionally, it temporarily disables and updates the button's label to indicate that the text has been copied.
</p>
</div>
</div>
</div>

 <div id="outline-container-org844fc6a" class="outline-2">
 <h2 id="org844fc6a">How to run the script file?</h2>
 <div class="outline-text-2" id="text-org844fc6a">
 <p>
To run this script automatically, when a org-src block appear in html I do this in
the  <code>head.html</code> file in my org project:
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span class="org-function-name">script</span>  <span class="org-variable-name">src</span>= <span class="org-string">"/cpbtn.js"</span>></ <span class="org-function-name">script</span>>
< <span class="org-function-name">script</span>>
  window.onload = function() {
      // Call the function to create copy buttons in each org-src-container div
      createCopyButtonForDivs();
  };
</ <span class="org-function-name">script</span>>
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgbf35aae" class="outline-2">
 <h2 id="orgbf35aae">Test the buttons:</h2>
 <div class="outline-text-2" id="text-orgbf35aae">
</div>
 <div id="outline-container-orgebfdbbe" class="outline-3">
 <h3 id="orgebfdbbe">Python</h3>
 <div class="outline-text-3" id="text-orgebfdbbe">
 <div class="org-src-container">
 <pre class="src src-python"> <span class="org-keyword">import</span> calendar
 <span class="org-keyword">for</span> i  <span class="org-keyword">in</span>  <span class="org-builtin">range</span>(100):
     <span class="org-builtin">print</span>(i)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org365e297" class="outline-3">
 <h3 id="org365e297">Emacs-lisp</h3>
 <div class="outline-text-3" id="text-org365e297">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(message  <span class="org-string">"hello World"</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgf48784a" class="outline-3">
 <h3 id="orgf48784a">C</h3>
 <div class="outline-text-3" id="text-orgf48784a">
 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-preprocessor">#include</span>  <span class="org-string"><stdio></span>
 <span class="org-type">int</span>  <span class="org-function-name">main</span>( <span class="org-type">int</span>  <span class="org-variable-name">argc</span>,  <span class="org-type">char</span> * <span class="org-variable-name">argv</span>[])
{
         <span class="org-keyword">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://jpacheco.codeberg.page/posts/./20231229T170308--copy-org-blocks-to-clipboard__javascript_post.html</link>
  <guid isPermaLink="false">https://jpacheco.codeberg.page/posts/./20231229T170308--copy-org-blocks-to-clipboard__javascript_post.html</guid>
  <pubDate>Fri, 29 Dec 2023 08:00:00 -0600</pubDate>
</item>
<item>
  <title>Source blocks</title>
  <description><![CDATA[<div id="content" class="content">
 <div class="PREVIEW" id="org873d464">
 <p>
This post is for another test, I am going to test a javascript script, that
add a button in every org-src-block that ox-publish genereates when export
the  <code>html</code> file. 
Let's test…
</p>

</div>

 <div id="outline-container-org8f83c8a" class="outline-2">
 <h2 id="org8f83c8a">Python</h2>
 <div class="outline-text-2" id="text-org8f83c8a">
 <div class="org-src-container">
 <pre class="src src-python"> <span class="org-keyword">import</span> calendar
 <span class="org-keyword">for</span> i  <span class="org-keyword">in</span>  <span class="org-builtin">range</span>(100):
     <span class="org-builtin">print</span>(i)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgd7ec242" class="outline-2">
 <h2 id="orgd7ec242">Emacs-lisp</h2>
 <div class="outline-text-2" id="text-orgd7ec242">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(message  <span class="org-string">"hello World"</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgac8a272" class="outline-2">
 <h2 id="orgac8a272">C</h2>
 <div class="outline-text-2" id="text-orgac8a272">
 <div class="org-src-container">
 <pre class="src src-c"> <span class="org-preprocessor">#include</span>  <span class="org-string"><stdio></span>
 <span class="org-type">int</span>  <span class="org-function-name">main</span>( <span class="org-type">int</span>  <span class="org-variable-name">argc</span>,  <span class="org-type">char</span> * <span class="org-variable-name">argv</span>[])
{
         <span class="org-keyword">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>https://jpacheco.codeberg.page/posts/./20231229T170308--source-blocks__javascript_post.html</link>
  <guid isPermaLink="false">https://jpacheco.codeberg.page/posts/./20231229T170308--source-blocks__javascript_post.html</guid>
  <pubDate>Fri, 29 Dec 2023 08:00:00 -0600</pubDate>
</item>
<item>
  <title>Attempt to test RSS feeds</title>
  <description><![CDATA[<div id="content" class="content">
 <p>

</p>
 <div class="PREVIEW" id="org19c149d">
 <p>
Hello.
</p>

 <p>
This post, is about  more like a testing, because, I'm trying to add RSS feeds into 
this "web-page", so basically this is a test, and see if when I build the webpage
is going to work… or not.
So, this is the preview and read this post to see what I'm trying to do.
</p>

</div>

 <div id="outline-container-org6fc5f77" class="outline-2">
 <h2 id="org6fc5f77">Rss Feeds.</h2>
 <div class="outline-text-2" id="text-org6fc5f77">
 <p>
First, what is  <code>rss feeds</code>?
This is what wikipedia have in their page:
</p>
 <pre class="example" id="org27ec1bc">
RSS (RDF Site Summary or Really Simple Syndication) is a web feed that allows users and applications to access updates to websites in a standardized, computer-readable format. Subscribing to RSS feeds can allow a user to keep track of many different websites in a single news aggregator, which constantly monitor sites for new content, removing the need for the user to manually check them. News aggregators (or "RSS readers") can be built into a browser, installed on a desktop computer, or installed on a mobile device.
</pre>

 <p>
Well whit that read, what I'm going to do is to export a file with the  <code>.xml</code> extension,
and stored in my host  <code>codeberg pages</code>, well that is the goal, but I'm not sure about it.
</p>
</div>
</div>

 <div id="outline-container-org4e7c21a" class="outline-2">
 <h2 id="org4e7c21a">Packages needed:</h2>
 <div class="outline-text-2" id="text-org4e7c21a">
 <p>
These are the packages that we need to use to make the rss file:
</p>
 <ul class="org-ul"> <li>ox-publish.</li>
 <li>ox-rss.</li>
 <li>webfeeder.</li>
 <li>esxml.</li>
</ul> <p>
and these need to be in the  <code>build-site.el</code> script:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;; </span> <span class="org-comment">Check and install dependencies</span>
( <span class="org-keyword">dolist</span> (package '(htmlize ox-rss webfeeder esxml))
  ( <span class="org-keyword">unless</span> (package-installed-p package)
    (package-install package)))

 <span class="org-comment-delimiter">;; </span> <span class="org-comment">Load publishing system</span>
( <span class="org-keyword">require</span> ' <span class="org-constant">ox-publish</span>)
( <span class="org-keyword">require</span> ' <span class="org-constant">ox-rss</span>)
( <span class="org-keyword">require</span> ' <span class="org-constant">webfeeder</span>)
( <span class="org-keyword">require</span> ' <span class="org-constant">esxml</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org3605e36" class="outline-2">
 <h2 id="org3605e36">Functions to use:</h2>
 <div class="outline-text-2" id="text-org3605e36">
 <p>
Now declare some functions to parse in the public folder that we create for save the
exported  <code>html</code> files.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;;; </span> <span class="org-comment">build RSS feed</span>

( <span class="org-keyword">defun</span>  <span class="org-function-name">dw/rss-extract-date</span> (html-file)
   <span class="org-doc">"Extract the post date from an HTML file."</span>
  ( <span class="org-keyword">with-temp-buffer</span>
    (insert-file-contents html-file)
    ( <span class="org-keyword">let*</span> ((dom (libxml-parse-html-region (point-min) (point-max)))
           (date-string (dom-text (car (dom-by-class dom  <span class="org-string">"date"</span>))))
           (parsed-date (parse-time-string date-string))
           (day (nth 3 parsed-date))
           (month (nth 4 parsed-date))
           (year (nth 5 parsed-date)))
       <span class="org-comment-delimiter">;; </span> <span class="org-comment">NOTE: Hardcoding this at 8am for now</span>
      (encode-time 0 0 8 day month year))))

( <span class="org-keyword">setq</span> webfeeder-date-function #'dw/rss-extract-date)

(webfeeder-build  <span class="org-string">"rss.xml"</span>
                  <span class="org-string">"./public"</span>
                  <span class="org-string">"https://jpacheco.codeberg.page/"</span>
                 (mapcar ( <span class="org-keyword">lambda</span> (file) (concat  <span class="org-string">"posts/"</span> file))
                         ( <span class="org-keyword">let</span> ((default-directory (expand-file-name  <span class="org-string">"./public/posts/"</span>)))
                           (directory-files-recursively  <span class="org-string">"./"</span>  <span class="org-string">".*\\.html$"</span>)))
                  <span class="org-builtin">:builder</span> 'webfeeder-make-rss
                  <span class="org-builtin">:title</span>  <span class="org-string">"Javier Pacheco's Blog"</span>
                  <span class="org-builtin">:description</span>  <span class="org-string">"Posts, information and resources from Javier Pacheco"</span>
                  <span class="org-builtin">:author</span>  <span class="org-string">"Javier Pacheco"</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgf3c765f" class="outline-2">
 <h2 id="orgf3c765f">Testing.</h2>
 <div class="outline-text-2" id="text-orgf3c765f">
 <p>
Well, this post ends here, now in a few minutes this post is going to be uploaded,
and I'll see if rss feeds generator actually works whit the functions and  commands
above.
</p>
</div>
</div>
</div>]]></description>
  <link>https://jpacheco.codeberg.page/posts/./20231226T142110--attempt-to-test-rss-feeds__personal_post.html</link>
  <guid isPermaLink="false">https://jpacheco.codeberg.page/posts/./20231226T142110--attempt-to-test-rss-feeds__personal_post.html</guid>
  <pubDate>Tue, 26 Dec 2023 08:00:00 -0600</pubDate>
</item>
<item>
  <title>Denote silo function</title>
  <description><![CDATA[<div id="content" class="content">
 <p>

</p>
 <div class="PREVIEW" id="org6c2abeb">
 <p>
I have been reading some thing information about denote, and its powerful tools
that the good  <code>prots</code> give to us the mortals. I am starting this "post" thing, and 
is good to have my notes apart from the posts that I'm going to write in the 
future, so reading I find a interesting function that prots suggest to use 
in the creation of notes.
</p>

</div>

 <div id="outline-container-orgbe44b60" class="outline-2">
 <h2 id="orgbe44b60">Use custom commands to select a silo.</h2>
 <div class="outline-text-2" id="text-orgbe44b60">
 <p>
As you can read in the tittle,  <code>prots</code> creates this singular  <i>elsip</i> function, that  prompts
for a entry point directory and then a denote function.
</p>
</div>

 <div id="outline-container-orgee87b99" class="outline-3">
 <h3 id="orgee87b99">The Silo funcitons:</h3>
 <div class="outline-text-3" id="text-orgee87b99">
</div>
 <div id="outline-container-orga2babf0" class="outline-4">
 <h4 id="orga2babf0">First part of the function:</h4>
 <div class="outline-text-4" id="text-orga2babf0">
 <p>
Define a list of directories. This is very convenient, because whit this I can separate
my notes directory of my posts directory:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defvar</span>  <span class="org-variable-name">my-denote-silo-directories</span>
  `( <span class="org-string">"/home/prot/Videos/recordings"</span>
     <span class="org-string">"/home/prot/Documents/books"</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">You don't actually need to include the `</span> <span class="org-comment"> <span class="org-constant">denote-directory</span></span> <span class="org-comment">' here</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">if you use the regular commands in their global context.  I am</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">including it for completeness.</span>
    ,denote-directory)
   <span class="org-doc">"List of file paths pointing to my Denote silos.</span>
 <span class="org-doc">  This is a list of strings."</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org22acbed" class="outline-4">
 <h4 id="org22acbed">Then define a list of the denote commands that usually I use:</h4>
 <div class="outline-text-4" id="text-org22acbed">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defvar</span>  <span class="org-variable-name">my-denote-commands-for-silos</span>
  '(denote
    denote-date
    denote-subdirectory
    denote-template
    denote-type)
   <span class="org-doc">"List of Denote commands to call after selecting a silo.</span>
 <span class="org-doc">  This is a list of symbols that specify the note-creating</span>
 <span class="org-doc">  interactive functions that Denote provides."</span>)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge416c91" class="outline-4">
 <h4 id="orge416c91">The Silo Command in action:</h4>
 <div class="outline-text-4" id="text-orge416c91">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defun</span>  <span class="org-function-name">my-denote-pick-silo-then-command</span> (silo command)
   <span class="org-doc">"Select SILO and run Denote COMMAND in it.</span>
 <span class="org-doc">  SILO is a file path from `</span> <span class="org-doc"> <span class="org-constant">my-denote-silo-directories</span></span> <span class="org-doc">', while</span>
 <span class="org-doc">  COMMAND is one among `</span> <span class="org-doc"> <span class="org-constant">my-denote-commands-for-silos</span></span> <span class="org-doc">'."</span>
  ( <span class="org-keyword">interactive</span>
   (list (completing-read  <span class="org-string">"Select a silo: "</span> my-denote-silo-directories nil t)
         (intern (completing-read
                   <span class="org-string">"Run command in silo: "</span>
                  my-denote-commands-for-silos nil t))))
  ( <span class="org-keyword">let</span> ((denote-user-enforced-denote-directory silo))
    (call-interactively command)))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org7b49773" class="outline-4">
 <h4 id="org7b49773"> <b>The complete functions:</b></h4>
 <div class="outline-text-4" id="text-org7b49773">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span class="org-keyword">defvar</span>  <span class="org-variable-name">my-denote-silo-directories</span>
  `( <span class="org-string">"/home/prot/Videos/recordings"</span>
     <span class="org-string">"/home/prot/Documents/books"</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">You don't actually need to include the `</span> <span class="org-comment"> <span class="org-constant">denote-directory</span></span> <span class="org-comment">' here</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">if you use the regular commands in their global context.  I am</span>
     <span class="org-comment-delimiter">;; </span> <span class="org-comment">including it for completeness.</span>
    ,denote-directory)
   <span class="org-doc">"List of file paths pointing to my Denote silos.</span>
 <span class="org-doc">  This is a list of strings."</span>)

( <span class="org-keyword">defvar</span>  <span class="org-variable-name">my-denote-commands-for-silos</span>
  '(denote
    denote-date
    denote-subdirectory
    denote-template
    denote-type)
   <span class="org-doc">"List of Denote commands to call after selecting a silo.</span>
 <span class="org-doc">  This is a list of symbols that specify the note-creating</span>
 <span class="org-doc">  interactive functions that Denote provides."</span>)

( <span class="org-keyword">defun</span>  <span class="org-function-name">my-denote-pick-silo-then-command</span> (silo command)
   <span class="org-doc">"Select SILO and run Denote COMMAND in it.</span>
 <span class="org-doc">  SILO is a file path from `</span> <span class="org-doc"> <span class="org-constant">my-denote-silo-directories</span></span> <span class="org-doc">', while</span>
 <span class="org-doc">  COMMAND is one among `</span> <span class="org-doc"> <span class="org-constant">my-denote-commands-for-silos</span></span> <span class="org-doc">'."</span>
  ( <span class="org-keyword">interactive</span>
   (list (completing-read  <span class="org-string">"Select a silo: "</span> my-denote-silo-directories nil t)
         (intern (completing-read
                   <span class="org-string">"Run command in silo: "</span>
                  my-denote-commands-for-silos nil t))))
  ( <span class="org-keyword">let</span> ((denote-user-enforced-denote-directory silo))
    (call-interactively command)))
</pre>
</div>

 <p>
Now whit these couple of functions we can have a better way to take our notes, 
posts, and other denote related things.
</p>

 <p>
So, for now it's all, I was able to write this post within emacs and this silo function
that  <code>protesilaos</code> provide to us, so, Thank you  <code>prot</code>.
</p>
</div>
</div>
</div>
</div>

 <div id="outline-container-org88f5f14" class="outline-2">
 <h2 id="org88f5f14">Reference:</h2>
 <div class="outline-text-2" id="text-org88f5f14">
 <dl class="org-dl"> <dt> <a href="https://protesilaos.com/emacs/denote#h:0f72e6ea-97f0-42e1-8fd4-0684af0422e0">Protesilaos web page</a></dt> <dd>3.5.1. Use custom commands to select a silo</dd>
</dl></div>
</div>
</div>]]></description>
  <link>https://jpacheco.codeberg.page/posts/./20231225T213425--denote-silo-function__emacs_personal_post.html</link>
  <guid isPermaLink="false">https://jpacheco.codeberg.page/posts/./20231225T213425--denote-silo-function__emacs_personal_post.html</guid>
  <pubDate>Mon, 25 Dec 2023 08:00:00 -0600</pubDate>
</item>
<item>
  <title>Themes and end of the year</title>
  <description><![CDATA[<div id="content" class="content">
 <p>

</p>
 <div class="PREVIEW" id="org7ced5ee">
 <p>
This is the first of a few posts I'm creating this "web" only for my knowledge,
and contribute with some of it.
</p>

 <p>
Some things are happening by a reason, so, instead of see the "bad" things that
happens; is a better practice to see the good side of the thing, these more or less
are some phrases that my dad says to me when me and my family have some problems.
</p>

</div>

 <div id="outline-container-h:0f3ffdd6-6b21-4e10-a01b-ce72a618a1f5" class="outline-2">
 <h2 id="h:0f3ffdd6-6b21-4e10-a01b-ce72a618a1f5">Themes in emacs and end of the year.</h2>
 <div class="outline-text-2" id="text-h:0f3ffdd6-6b21-4e10-a01b-ce72a618a1f5">
 <p>
I started to manage my themes, actually only one, I get rid off the  <i>doom-themes</i>.
and add the atom-one-dark theme, lets see what will happens,
I actually like this theme the most, the only thing that is an issue from me
is the actual fonts management, so I'm going to "hack" this theme a little bit.
</p>

 <p>
A end of another year is happening, this year  was a very though, health issues,
lack of money, lack of time, but at the end of the road, there is a minimal light
I hope that last call be the key, and hope this new year came with new challenges
and more opportunities.
</p>

 <p>
This year I learn a lot of things, like:
</p>
 <ul class="org-ul"> <li>Emacs.</li>
 <li>nvim/vim.</li>
 <li>voidlinux.</li>
 <li>re-learn how to program a robot.</li>
</ul> <p>
This ending year was a very good one, strong to get in trough but a very good one.
</p>
</div>
</div>
</div>]]></description>
  <link>https://jpacheco.codeberg.page/posts/./20231224T095629--themes-and-end-of-the-year__personal_post.html</link>
  <guid isPermaLink="false">https://jpacheco.codeberg.page/posts/./20231224T095629--themes-and-end-of-the-year__personal_post.html</guid>
  <pubDate>Sat, 23 Dec 2023 08:00:00 -0600</pubDate>
</item>
</channel>
</rss>
